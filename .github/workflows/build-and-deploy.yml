name: Build and Deploy Phishy Extension

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  EXTENSION_NAME: phishy-anti-phishing
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies (if package.json exists)
      run: |
        if [ -f package.json ]; then
          npm ci
        fi
    
    - name: Run security checks
      run: |
        # Check for hardcoded secrets
        echo "Checking for hardcoded API keys..."
        if grep -r "sk-ant-api03" js/ --exclude-dir=node_modules || \
           grep -r "YOUR_.*_API_KEY" js/ --exclude-dir=node_modules; then
          echo "❌ Hardcoded API keys found in source code!"
          exit 1
        fi
        echo "✅ No hardcoded API keys found"
    
    - name: Run unit tests
      run: |
        # Run the custom test framework
        echo "Running unit tests..."
        # Since we use vanilla JS, we'll use a simple test runner
        node -e "
          console.log('🧪 Running Phishy unit tests...');
          // Load test framework if it exists
          const fs = require('fs');
          if (fs.existsSync('tests/test-framework.js')) {
            console.log('✅ Test framework found');
            console.log('✅ All tests would run here');
          } else {
            console.log('⚠️ No test framework found, skipping tests');
          }
        "
    
    - name: Validate manifest
      run: |
        echo "Validating manifest.json..."
        node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
          
          // Check required fields
          const required = ['manifest_version', 'name', 'version', 'permissions'];
          for (const field of required) {
            if (!manifest[field]) {
              console.error(\`❌ Missing required field: \${field}\`);
              process.exit(1);
            }
          }
          
          // Check version format
          if (!/^\d+\.\d+\.\d+$/.test(manifest.version)) {
            console.error('❌ Invalid version format');
            process.exit(1);
          }
          
          console.log('✅ Manifest validation passed');
          console.log(\`📦 Extension: \${manifest.name} v\${manifest.version}\`);
        "

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Generate production configuration
      env:
        API_CLAUDE: ${{ secrets.API_CLAUDE }}
        API_VIRUS_TOTAL: ${{ secrets.API_VIRUS_TOTAL }}
      run: |
        echo "Generating production configuration..."
        
        # Create production config file
        cat > config/config.prod.js << EOF
        /**
         * Phishy Production Configuration
         * Generated by GitHub Actions CI/CD
         * Contains production API keys from GitHub Secrets
         */

        const PhishyConfig = {
            // VirusTotal API Configuration
            virustotal: {
                apiKey: '${API_VIRUS_TOTAL}',
                baseUrl: 'https://www.virustotal.com/vtapi/v2',
                endpoints: {
                    urlReport: '/url/report',
                    urlScan: '/url/scan'
                },
                rateLimits: {
                    requestsPerMinute: 4,
                    requestsPerDay: 1000
                },
                timeout: 10000
            },

            // Claude AI API Configuration  
            claude: {
                apiKey: '${API_CLAUDE}',
                baseUrl: 'https://api.anthropic.com/v1',
                model: 'claude-3-haiku-20240307',
                maxTokens: 1000,
                temperature: 0.1,
                timeout: 8000
            },

            // Extension Configuration
            extension: {
                features: {
                    virusTotalIntegration: true,
                    claudeAnalysis: true,
                    realtimeScanning: true,
                    urlWhitelist: true,
                    threatStatistics: true
                },
                
                defaults: {
                    protectionLevel: 'alto',
                    showNotifications: true,
                    autoBlock: true,
                    logLevel: 'INFO'
                },

                performance: {
                    maxConcurrentRequests: 5,
                    cacheTimeout: 600000, // 10 minutes in production
                    batchSize: 10,
                    debounceMs: 800
                }
            },

            // Production settings
            development: {
                demoMode: {
                    enabled: false, // Always disabled in production
                    mockResponses: false,
                    simulateLatency: false,
                    fakeThreats: []
                },
                
                debug: {
                    verbose: false, // Minimal logging in production
                    logApiCalls: false,
                    showTimings: false,
                    exportLogs: false
                }
            },

            // Security Configuration
            security: {
                validation: {
                    maxUrlLength: 2048,
                    maxListSize: 1000,
                    allowedProtocols: ['http:', 'https:'],
                    blockedPatterns: [
                        /javascript:/gi,
                        /data:/gi,
                        /file:/gi,
                        /vbscript:/gi
                    ]
                },
                
                rateLimiting: {
                    apiRequests: { max: 100, windowMs: 60000 }, // Higher limits for production
                    uiActions: { max: 50, windowMs: 10000 }
                },

                csp: {
                    enforceStrict: true,
                    allowInlineStyles: true,
                    reportViolations: false // Disable in production
                }
            }
        };

        // Export configuration
        if (typeof module !== 'undefined' && module.exports) {
            module.exports = PhishyConfig;
        } else {
            window.PhishyConfig = PhishyConfig;
        }
        EOF
        
        echo "✅ Production configuration generated"
    
    - name: Validate API keys
      env:
        API_CLAUDE: ${{ secrets.API_CLAUDE }}
        API_VIRUS_TOTAL: ${{ secrets.API_VIRUS_TOTAL }}
      run: |
        echo "Validating API keys..."
        
        # Check Claude API key format
        if [[ "$API_CLAUDE" =~ ^sk-ant-api03- ]]; then
          echo "✅ Claude API key format valid"
        else
          echo "❌ Invalid Claude API key format"
          exit 1
        fi
        
        # Check VirusTotal API key format (64 hex characters)
        if [[ "$API_VIRUS_TOTAL" =~ ^[a-f0-9]{64}$ ]]; then
          echo "✅ VirusTotal API key format valid"
        else
          echo "❌ Invalid VirusTotal API key format"
          exit 1
        fi
        
        echo "✅ All API keys validated"
    
    - name: Build extension package
      run: |
        echo "Building extension package..."
        
        # Create build directory
        mkdir -p build/${{ env.EXTENSION_NAME }}
        
        # Copy all necessary files
        cp -r css/ build/${{ env.EXTENSION_NAME }}/
        cp -r js/ build/${{ env.EXTENSION_NAME }}/
        cp -r icons/ build/${{ env.EXTENSION_NAME }}/
        cp -r config/ build/${{ env.EXTENSION_NAME }}/
        cp manifest.json build/${{ env.EXTENSION_NAME }}/
        cp popup.html build/${{ env.EXTENSION_NAME }}/
        
        # Remove development files from build
        rm -f build/${{ env.EXTENSION_NAME }}/config/config.local.js
        rm -f build/${{ env.EXTENSION_NAME }}/config/config.template.js
        
        # Update manifest version if this is a tag
        if [[ "${{ github.ref_type }}" == "tag" ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v} # Remove 'v' prefix
          echo "Updating manifest version to $VERSION"
          
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('build/${{ env.EXTENSION_NAME }}/manifest.json', 'utf8'));
            manifest.version = '$VERSION';
            fs.writeFileSync('build/${{ env.EXTENSION_NAME }}/manifest.json', JSON.stringify(manifest, null, 2));
          "
        fi
        
        echo "✅ Extension package built"
    
    - name: Create ZIP package
      run: |
        cd build
        zip -r ${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip ${{ env.EXTENSION_NAME }}/
        echo "✅ ZIP package created: ${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip"
        
        # Show package contents
        echo "📦 Package contents:"
        unzip -l ${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ github.sha }}
        path: build/${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip
        retention-days: 30

  deploy:
    name: Deploy Extension
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ github.sha }}
    
    - name: Prepare for deployment
      run: |
        echo "🚀 Preparing deployment..."
        echo "Extension: ${{ env.EXTENSION_NAME }}"
        echo "Version: Built from commit ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
        # Here you would typically:
        # 1. Upload to Chrome Web Store using chrome-webstore-upload-cli
        # 2. Update version in store
        # 3. Submit for review
        
        echo "✅ Deployment preparation complete"
        echo "📝 Manual step required: Upload ${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip to Chrome Web Store"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref_type == 'tag'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.EXTENSION_NAME }}-${{ github.sha }}
    
    - name: Generate release notes
      run: |
        echo "Generating release notes for ${{ github.ref_name }}..."
        
        cat > release-notes.md << EOF
        # Phishy Anti-Phishing Extension ${{ github.ref_name }}
        
        ## 🛡️ Security Features
        - Real-time phishing protection
        - VirusTotal integration for threat detection
        - Claude AI-powered threat analysis
        - Secure configuration management
        
        ## 🔧 Technical Improvements
        - Production-ready configuration system
        - Enhanced security validation
        - Improved error handling and logging
        - Content Security Policy compliance
        
        ## 📦 Installation
        1. Download the extension package below
        2. Extract the ZIP file
        3. Load unpacked extension in Chrome developer mode
        4. Or submit to Chrome Web Store for distribution
        
        ## 🔐 API Configuration
        This release includes production API configurations for:
        - VirusTotal threat detection
        - Claude AI analysis
        
        Built from commit: \`${{ github.sha }}\`
        EOF
        
        echo "✅ Release notes generated"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Phishy Extension ${{ github.ref_name }}
        body_path: release-notes.md
        files: |
          ${{ env.EXTENSION_NAME }}-${{ github.sha }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}